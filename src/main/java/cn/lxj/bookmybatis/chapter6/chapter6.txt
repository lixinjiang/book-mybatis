第六章 MyBatis的解析和运行原理
6.1 技术难点简介
通过debug会发现，mapper使用了动态代理，MapperProxy代理
    理解代理模式（动态代理）：在原有服务上多加一个站位，通过这个站位去控制服务的访问。
        比如客服和工程师和客户的关系，客服就是一个代理，她通过与客户的交流控制着对工程师的访问，以及要不要对工程师进行访问，
    所以站在客户的角度，只需要认识客服就好了。
    为什么使用代理模式：
        一方面可以控制如何真正的服务对象，提供额外的服务。另一些方面可以通过重写一些类来满足特定的需求，正如客服可以根据公司
    业务规则，提供一些服务，这个时候就不需要劳你大驾了。
        一般代理分为两种，一种是JDK反射机制提供的代理，另一种是CGLB代理。在JDK的代理，我们必须提供接口，而CGLB代理不需要提供
    接口，在MyBatis中，两种动态代理都使用到了。
反射技术：
        好处是配置性大大提高了，就如同Spring IOC容器一样，我们可以给很多配置设置参数，使得java的程序能够顺利运行起来，提高了java的
    灵活性和可配置性，降低了模块之间的耦合。
JDK动态代理：
    由java.lang.reflect.*;来提供。
    步骤： 1.编写服务类和接口，这个是真正的服务提供者，在JDK代理中接口是必须的。
          2.编写代理类，提供绑定和代理方法。
          3.写一个代理类，代理类的要求就是实现InvocationHandler接口的代理方法，当一个对象被绑定后，执行其方法的时候，就会进入到
            代理方法里面去。
CGLB动态代理：
    JDK提供的动态代理存在一个缺陷，就是你必须提供接口才可以使用，为了克服这个缺陷，我们可以使用开源框架--CGLB，是一种流行的动态代理。

